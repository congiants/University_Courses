CCS PCH C Compiler, Version 5.011, 5967               23-Απρ-24 17:55

               Filename:   C:\Users\D1_Station1\Desktop\Lab_07\Lab_07C\Source_code\source_code.lst

               ROM used:   984 bytes (3%)
                           Largest free fragment is 29732
               RAM used:   24 (1%) at main() level
                           46 (2%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
0800:  GOTO   0BC2
*
0808:  NOP   
080A:  NOP   
080C:  NOP   
080E:  NOP   
0810:  NOP   
0812:  NOP   
0814:  NOP   
0816:  NOP   
0818:  MOVWF  04
081A:  MOVFF  FD8,05
081E:  MOVFF  FE0,06
0822:  MOVLB  0
0824:  MOVFF  FE9,0C
0828:  MOVFF  FEA,07
082C:  MOVFF  FE1,08
0830:  MOVFF  FE2,09
0834:  MOVFF  FD9,0A
0838:  MOVFF  FDA,0B
083C:  MOVFF  FF3,12
0840:  MOVFF  FF4,13
0844:  MOVFF  FFA,14
0848:  MOVFF  00,0E
084C:  MOVFF  01,0F
0850:  MOVFF  02,10
0854:  MOVFF  03,11
0858:  BTFSS  FF2.5
085A:  GOTO   0864
085E:  BTFSC  FF2.2
0860:  GOTO   0A12
0864:  MOVFF  0E,00
0868:  MOVFF  0F,01
086C:  MOVFF  10,02
0870:  MOVFF  11,03
0874:  MOVFF  0C,FE9
0878:  MOVFF  07,FEA
087C:  BSF    07.7
087E:  MOVFF  08,FE1
0882:  MOVFF  09,FE2
0886:  MOVFF  0A,FD9
088A:  MOVFF  0B,FDA
088E:  MOVFF  12,FF3
0892:  MOVFF  13,FF4
0896:  MOVFF  14,FFA
089A:  MOVF   04,W
089C:  MOVFF  06,FE0
08A0:  MOVFF  05,FD8
08A4:  RETFIE 0
.................... #include<main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
08A6:  MOVFF  FF2,0D
08AA:  BCF    FF2.6
08AC:  BCF    FF2.7
08AE:  CLRF   FF7
08B0:  ADDLW  C6
08B2:  MOVWF  FF6
08B4:  MOVLW  08
08B6:  ADDWFC FF7,F
08B8:  TBLRD*+
08BA:  MOVF   FF5,W
08BC:  BTFSC  0D.6
08BE:  BSF    FF2.6
08C0:  BTFSC  0D.7
08C2:  BSF    FF2.7
08C4:  RETURN 0
08C6:  DATA 28,0C
08C8:  DATA 01,06
08CA:  DATA 0C,00
08CC:  DATA 20,4D
08CE:  DATA 49,4B
08D0:  DATA 52,4F
08D2:  DATA 4C,41
08D4:  DATA 42,00
*
09F2:  TBLRD*+
09F4:  MOVF   FF5,F
09F6:  BZ    0A10
09F8:  MOVFF  FF6,23
09FC:  MOVFF  FF7,24
0A00:  MOVFF  FF5,25
0A04:  RCALL  09B0
0A06:  MOVFF  23,FF6
0A0A:  MOVFF  24,FF7
0A0E:  BRA    09F2
0A10:  RETURN 0
*
0A58:  DATA 2A,2A
0A5A:  DATA 2A,2A
0A5C:  DATA 2A,00
0A5E:  DATA 20,20
0A60:  DATA 20,20
0A62:  DATA 20,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0984:  CLRF   FEA
0986:  MOVLW  26
0988:  MOVWF  FE9
098A:  MOVF   FEF,W
098C:  BZ    09AE
098E:  MOVLW  0F
0990:  MOVWF  01
0992:  MOVLW  BF
0994:  MOVWF  00
0996:  CLRWDT
0998:  DECFSZ 00,F
099A:  BRA    0996
099C:  DECFSZ 01,F
099E:  BRA    0992
09A0:  MOVLW  8F
09A2:  MOVWF  00
09A4:  DECFSZ 00,F
09A6:  BRA    09A4
09A8:  CLRWDT
09AA:  DECFSZ FEF,F
09AC:  BRA    098E
09AE:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include<flex_lcd.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
08D6:  BTFSC  2D.0
08D8:  BRA    08DE
08DA:  BCF    F8A.4
08DC:  BRA    08E0
08DE:  BSF    F8A.4
08E0:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
08E2:  BTFSC  2D.1
08E4:  BRA    08EA
08E6:  BCF    F8A.5
08E8:  BRA    08EC
08EA:  BSF    F8A.5
08EC:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
08EE:  BTFSC  2D.2
08F0:  BRA    08F6
08F2:  BCF    F8A.6
08F4:  BRA    08F8
08F6:  BSF    F8A.6
08F8:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
08FA:  BTFSC  2D.3
08FC:  BRA    0902
08FE:  BCF    F8A.7
0900:  BRA    0904
0902:  BSF    F8A.7
0904:  BCF    F93.7
....................  
....................  delay_cycles(20); 
0906:  MOVLW  06
0908:  MOVWF  00
090A:  DECFSZ 00,F
090C:  BRA    090A
090E:  NOP   
....................  output_high(LCD_E); 
0910:  BCF    F93.3
0912:  BSF    F8A.3
....................  delay_us(50); 
0914:  CLRWDT
0916:  MOVLW  C7
0918:  MOVWF  00
091A:  DECFSZ 00,F
091C:  BRA    091A
091E:  NOP   
....................  output_low(LCD_E); 
0920:  BCF    F93.3
0922:  BCF    F8A.3
0924:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0926:  BCF    F93.2
0928:  BCF    F8A.2
....................  
.................... if(address) 
092A:  MOVF   2A,F
092C:  BZ    0934
....................    output_high(LCD_RS); 
092E:  BCF    F93.2
0930:  BSF    F8A.2
0932:  BRA    0938
.................... else 
....................    output_low(LCD_RS); 
0934:  BCF    F93.2
0936:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
0938:  MOVLW  02
093A:  MOVWF  00
093C:  DECFSZ 00,F
093E:  BRA    093C
0940:  BRA    0942
0942:  NOP   
....................  
.................... output_low(LCD_E); 
0944:  BCF    F93.3
0946:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
0948:  SWAPF  2B,W
094A:  MOVWF  2C
094C:  MOVLW  0F
094E:  ANDWF  2C,F
0950:  MOVFF  2C,2D
0954:  RCALL  08D6
.................... lcd_send_nibble(n & 0xf); 
0956:  MOVF   2B,W
0958:  ANDLW  0F
095A:  MOVWF  2C
095C:  MOVWF  2D
095E:  RCALL  08D6
0960:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
0A64:  BCF    F93.2
0A66:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
0A68:  BCF    F93.3
0A6A:  BCF    F8A.3
0A6C:  CLRF   16
0A6E:  BTFSC  FF2.6
0A70:  BSF    16.6
0A72:  BCF    FF2.6
0A74:  BTFSC  FF2.7
0A76:  BSF    16.7
0A78:  BCF    FF2.7
....................  
.................... delay_ms(200); 
0A7A:  MOVLW  C8
0A7C:  MOVWF  26
0A7E:  RCALL  0984
0A80:  BTFSC  16.6
0A82:  BSF    FF2.6
0A84:  BTFSC  16.7
0A86:  BSF    FF2.7
....................  
.................... for(i=0 ;i < 3; i++) 
0A88:  CLRF   18
0A8A:  MOVF   18,W
0A8C:  SUBLW  02
0A8E:  BNC   0ACC
0A90:  CLRF   16
0A92:  BTFSC  FF2.6
0A94:  BSF    16.6
0A96:  BCF    FF2.6
0A98:  BTFSC  FF2.7
0A9A:  BSF    16.7
0A9C:  BCF    FF2.7
....................    { 
....................     lcd_send_nibble(0x03); 
0A9E:  MOVLW  03
0AA0:  MOVWF  2D
0AA2:  RCALL  08D6
0AA4:  BTFSC  16.6
0AA6:  BSF    FF2.6
0AA8:  BTFSC  16.7
0AAA:  BSF    FF2.7
0AAC:  CLRF   16
0AAE:  BTFSC  FF2.6
0AB0:  BSF    16.6
0AB2:  BCF    FF2.6
0AB4:  BTFSC  FF2.7
0AB6:  BSF    16.7
0AB8:  BCF    FF2.7
....................     delay_ms(10); 
0ABA:  MOVLW  0A
0ABC:  MOVWF  26
0ABE:  RCALL  0984
0AC0:  BTFSC  16.6
0AC2:  BSF    FF2.6
0AC4:  BTFSC  16.7
0AC6:  BSF    FF2.7
0AC8:  INCF   18,F
0ACA:  BRA    0A8A
0ACC:  CLRF   16
0ACE:  BTFSC  FF2.6
0AD0:  BSF    16.6
0AD2:  BCF    FF2.6
0AD4:  BTFSC  FF2.7
0AD6:  BSF    16.7
0AD8:  BCF    FF2.7
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
0ADA:  MOVLW  02
0ADC:  MOVWF  2D
0ADE:  RCALL  08D6
0AE0:  BTFSC  16.6
0AE2:  BSF    FF2.6
0AE4:  BTFSC  16.7
0AE6:  BSF    FF2.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0AE8:  CLRF   18
0AEA:  MOVF   18,W
0AEC:  SUBLW  03
0AEE:  BNC   0B44
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0AF0:  CLRF   03
0AF2:  MOVF   18,W
0AF4:  MOVFF  FF2,19
0AF8:  BCF    FF2.6
0AFA:  BCF    FF2.7
0AFC:  RCALL  08A6
0AFE:  BTFSC  19.6
0B00:  BSF    FF2.6
0B02:  BTFSC  19.7
0B04:  BSF    FF2.7
0B06:  MOVWF  19
0B08:  CLRF   16
0B0A:  BTFSC  FF2.6
0B0C:  BSF    16.6
0B0E:  BCF    FF2.6
0B10:  BTFSC  FF2.7
0B12:  BSF    16.7
0B14:  BCF    FF2.7
0B16:  CLRF   2A
0B18:  MOVWF  2B
0B1A:  RCALL  0926
0B1C:  BTFSC  16.6
0B1E:  BSF    FF2.6
0B20:  BTFSC  16.7
0B22:  BSF    FF2.7
0B24:  CLRF   16
0B26:  BTFSC  FF2.6
0B28:  BSF    16.6
0B2A:  BCF    FF2.6
0B2C:  BTFSC  FF2.7
0B2E:  BSF    16.7
0B30:  BCF    FF2.7
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(10); 
0B32:  MOVLW  0A
0B34:  MOVWF  26
0B36:  RCALL  0984
0B38:  BTFSC  16.6
0B3A:  BSF    FF2.6
0B3C:  BTFSC  16.7
0B3E:  BSF    FF2.7
0B40:  INCF   18,F
0B42:  BRA    0AEA
....................     } 
0B44:  GOTO   0B4A (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0962:  DECFSZ 27,W
0964:  BRA    0968
0966:  BRA    096E
....................    address = lcd_line_two; 
0968:  MOVLW  40
096A:  MOVWF  28
096C:  BRA    0970
.................... else 
....................    address=0; 
096E:  CLRF   28
....................  
.................... address += x-1; 
0970:  MOVLW  01
0972:  SUBWF  26,W
0974:  ADDWF  28,F
.................... lcd_send_byte(0, 0x80 | address); 
0976:  MOVF   28,W
0978:  IORLW  80
097A:  MOVWF  29
097C:  CLRF   2A
097E:  MOVWF  2B
0980:  RCALL  0926
0982:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
*
09B0:  MOVF   25,W
09B2:  XORLW  0C
09B4:  BZ    09C0
09B6:  XORLW  06
09B8:  BZ    09D0
09BA:  XORLW  02
09BC:  BZ    09DC
09BE:  BRA    09E6
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
09C0:  CLRF   2A
09C2:  MOVLW  01
09C4:  MOVWF  2B
09C6:  RCALL  0926
....................       delay_ms(4); 
09C8:  MOVLW  04
09CA:  MOVWF  26
09CC:  RCALL  0984
....................       break; 
09CE:  BRA    09F0
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
09D0:  MOVLW  01
09D2:  MOVWF  26
09D4:  MOVLW  02
09D6:  MOVWF  27
09D8:  RCALL  0962
....................        break; 
09DA:  BRA    09F0
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
09DC:  CLRF   2A
09DE:  MOVLW  10
09E0:  MOVWF  2B
09E2:  RCALL  0926
....................        break; 
09E4:  BRA    09F0
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
09E6:  MOVLW  01
09E8:  MOVWF  2A
09EA:  MOVFF  25,2B
09EE:  RCALL  0926
....................        break; 
....................    } 
09F0:  RETURN 0
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
.................... int counter; 
....................  
.................... void init(void){ 
....................  
....................    lcd_init(); 
*
0B48:  BRA    0A64
....................     
....................    lcd_putc("\f"); 
0B4A:  MOVLW  CA
0B4C:  MOVWF  FF6
0B4E:  MOVLW  08
0B50:  MOVWF  FF7
0B52:  CLRF   16
0B54:  BTFSC  FF2.6
0B56:  BSF    16.6
0B58:  BCF    FF2.6
0B5A:  BTFSC  FF2.7
0B5C:  BSF    16.7
0B5E:  BCF    FF2.7
0B60:  RCALL  09F2
0B62:  BTFSC  16.6
0B64:  BSF    FF2.6
0B66:  BTFSC  16.7
0B68:  BSF    FF2.7
0B6A:  CLRF   16
0B6C:  BTFSC  FF2.6
0B6E:  BSF    16.6
0B70:  BCF    FF2.6
0B72:  BTFSC  FF2.7
0B74:  BSF    16.7
0B76:  BCF    FF2.7
....................     
....................    lcd_gotoxy(4,1); 
0B78:  MOVLW  04
0B7A:  MOVWF  26
0B7C:  MOVLW  01
0B7E:  MOVWF  27
0B80:  RCALL  0962
0B82:  BTFSC  16.6
0B84:  BSF    FF2.6
0B86:  BTFSC  16.7
0B88:  BSF    FF2.7
....................     
....................    lcd_putc(" MIKROLAB"); 
0B8A:  MOVLW  CC
0B8C:  MOVWF  FF6
0B8E:  MOVLW  08
0B90:  MOVWF  FF7
0B92:  CLRF   16
0B94:  BTFSC  FF2.6
0B96:  BSF    16.6
0B98:  BCF    FF2.6
0B9A:  BTFSC  FF2.7
0B9C:  BSF    16.7
0B9E:  BCF    FF2.7
0BA0:  RCALL  09F2
0BA2:  BTFSC  16.6
0BA4:  BSF    FF2.6
0BA6:  BTFSC  16.7
0BA8:  BSF    FF2.7
....................     
....................   SETUP_TIMER_0(T0_INTERNAL | T0_DIV_64 ); 
0BAA:  MOVLW  85
0BAC:  MOVWF  FD5
....................     
....................    enable_interrupts(INT_TIMER0);    
0BAE:  BSF    FF2.5
....................     
....................    enable_interrupts(GLOBAL); 
0BB0:  MOVLW  C0
0BB2:  IORWF  FF2,F
....................     
....................    set_timer0(56161); 
0BB4:  MOVLW  DB
0BB6:  MOVWF  FD7
0BB8:  MOVLW  61
0BBA:  MOVWF  FD6
....................     
....................    counter = 0; 
0BBC:  CLRF   17
0BBE:  GOTO   0BD8 (RETURN)
.................... } 
....................  
.................... void main(void){ 
0BC2:  CLRF   FF8
0BC4:  BCF    FF1.2
0BC6:  BSF    FD0.7
0BC8:  BSF    07.7
0BCA:  MOVF   FC1,W
0BCC:  ANDLW  C0
0BCE:  IORLW  0F
0BD0:  MOVWF  FC1
0BD2:  MOVLW  07
0BD4:  MOVWF  FB4
....................    init(); 
0BD6:  BRA    0B48
....................    while(TRUE){} 
0BD8:  BRA    0BD8
.................... } 
....................  
....................  
.................... #INT_TIMER0     
....................  
0BDA:  SLEEP 
.................... void int_timer_0(void){ 
....................    set_timer0(56161); 
*
0A12:  MOVLW  DB
0A14:  MOVWF  FD7
0A16:  MOVLW  61
0A18:  MOVWF  FD6
....................     
....................    if(counter == 4){ 
0A1A:  MOVF   17,W
0A1C:  SUBLW  04
0A1E:  BNZ   0A34
....................       lcd_gotoxy(5,2); 
0A20:  MOVLW  05
0A22:  MOVWF  26
0A24:  MOVLW  02
0A26:  MOVWF  27
0A28:  RCALL  0962
....................       lcd_putc("*****"); 
0A2A:  MOVLW  58
0A2C:  MOVWF  FF6
0A2E:  MOVLW  0A
0A30:  MOVWF  FF7
0A32:  RCALL  09F2
....................    } 
....................     
....................    if(counter ==8){ 
0A34:  MOVF   17,W
0A36:  SUBLW  08
0A38:  BNZ   0A50
....................       lcd_gotoxy(5,2); 
0A3A:  MOVLW  05
0A3C:  MOVWF  26
0A3E:  MOVLW  02
0A40:  MOVWF  27
0A42:  RCALL  0962
....................       lcd_putc("     "); 
0A44:  MOVLW  5E
0A46:  MOVWF  FF6
0A48:  MOVLW  0A
0A4A:  MOVWF  FF7
0A4C:  RCALL  09F2
....................       counter = 0; 
0A4E:  CLRF   17
....................    } 
....................    counter++; 
0A50:  INCF   17,F
0A52:  BCF    FF2.2
0A54:  GOTO   0864
.................... } 
....................     

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
