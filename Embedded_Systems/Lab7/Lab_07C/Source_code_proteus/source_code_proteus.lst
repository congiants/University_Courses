CCS PCH C Compiler, Version 5.011, 5967               23-Απρ-24 17:54

               Filename:   C:\Users\D1_Station1\Desktop\Lab_07\Lab_07C\Source_code_proteus\source_code_proteus.lst

               ROM used:   988 bytes (3%)
                           Largest free fragment is 30944
               RAM used:   24 (1%) at main() level
                           46 (2%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 30

*
0000:  GOTO   03C6
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  FF2.5
005A:  GOTO   0064
005E:  BTFSC  FF2.2
0060:  GOTO   0212
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... #include<main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
00A6:  MOVFF  FF2,0D
00AA:  BCF    FF2.6
00AC:  BCF    FF2.7
00AE:  CLRF   FF7
00B0:  ADDLW  C6
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  BTFSC  0D.6
00BE:  BSF    FF2.6
00C0:  BTFSC  0D.7
00C2:  BSF    FF2.7
00C4:  RETURN 0
00C6:  DATA 28,0C
00C8:  DATA 01,06
00CA:  DATA 0C,00
00CC:  DATA 20,4D
00CE:  DATA 49,4B
00D0:  DATA 52,4F
00D2:  DATA 4C,41
00D4:  DATA 42,00
*
01F2:  TBLRD*+
01F4:  MOVF   FF5,F
01F6:  BZ    0210
01F8:  MOVFF  FF6,23
01FC:  MOVFF  FF7,24
0200:  MOVFF  FF5,25
0204:  RCALL  01B0
0206:  MOVFF  23,FF6
020A:  MOVFF  24,FF7
020E:  BRA    01F2
0210:  RETURN 0
*
0258:  DATA 2A,2A
025A:  DATA 2A,2A
025C:  DATA 2A,00
025E:  DATA 20,20
0260:  DATA 20,20
0262:  DATA 20,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0184:  CLRF   FEA
0186:  MOVLW  26
0188:  MOVWF  FE9
018A:  MOVF   FEF,W
018C:  BZ    01AE
018E:  MOVLW  0F
0190:  MOVWF  01
0192:  MOVLW  BF
0194:  MOVWF  00
0196:  CLRWDT
0198:  DECFSZ 00,F
019A:  BRA    0196
019C:  DECFSZ 01,F
019E:  BRA    0192
01A0:  MOVLW  8F
01A2:  MOVWF  00
01A4:  DECFSZ 00,F
01A6:  BRA    01A4
01A8:  CLRWDT
01AA:  DECFSZ FEF,F
01AC:  BRA    018E
01AE:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include<flex_lcd-proteus.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00D6:  BTFSC  2D.0
00D8:  BRA    00DE
00DA:  BCF    F8A.4
00DC:  BRA    00E0
00DE:  BSF    F8A.4
00E0:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
00E2:  BTFSC  2D.1
00E4:  BRA    00EA
00E6:  BCF    F8A.5
00E8:  BRA    00EC
00EA:  BSF    F8A.5
00EC:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
00EE:  BTFSC  2D.2
00F0:  BRA    00F6
00F2:  BCF    F8A.6
00F4:  BRA    00F8
00F6:  BSF    F8A.6
00F8:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
00FA:  BTFSC  2D.3
00FC:  BRA    0102
00FE:  BCF    F8A.7
0100:  BRA    0104
0102:  BSF    F8A.7
0104:  BCF    F93.7
....................  
....................  delay_cycles(20); 
0106:  MOVLW  06
0108:  MOVWF  00
010A:  DECFSZ 00,F
010C:  BRA    010A
010E:  NOP   
....................  output_high(LCD_E); 
0110:  BCF    F93.3
0112:  BSF    F8A.3
....................  delay_us(50); 
0114:  CLRWDT
0116:  MOVLW  C7
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  NOP   
....................  output_low(LCD_E); 
0120:  BCF    F93.3
0122:  BCF    F8A.3
0124:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0126:  BCF    F93.2
0128:  BCF    F8A.2
....................  
.................... if(address) 
012A:  MOVF   2A,F
012C:  BZ    0134
....................    output_high(LCD_RS); 
012E:  BCF    F93.2
0130:  BSF    F8A.2
0132:  BRA    0138
.................... else 
....................    output_low(LCD_RS); 
0134:  BCF    F93.2
0136:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
0138:  MOVLW  02
013A:  MOVWF  00
013C:  DECFSZ 00,F
013E:  BRA    013C
0140:  BRA    0142
0142:  NOP   
....................  
.................... output_low(LCD_E); 
0144:  BCF    F93.3
0146:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
0148:  SWAPF  2B,W
014A:  MOVWF  2C
014C:  MOVLW  0F
014E:  ANDWF  2C,F
0150:  MOVFF  2C,2D
0154:  RCALL  00D6
.................... lcd_send_nibble(n & 0xf); 
0156:  MOVF   2B,W
0158:  ANDLW  0F
015A:  MOVWF  2C
015C:  MOVWF  2D
015E:  RCALL  00D6
0160:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
0264:  BCF    F93.2
0266:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
0268:  BCF    F93.3
026A:  BCF    F8A.3
.................... output_low(LCD_RW);          
026C:  BCF    F93.1
026E:  BCF    F8A.1
0270:  CLRF   16
0272:  BTFSC  FF2.6
0274:  BSF    16.6
0276:  BCF    FF2.6
0278:  BTFSC  FF2.7
027A:  BSF    16.7
027C:  BCF    FF2.7
.................... delay_ms(10); 
027E:  MOVLW  0A
0280:  MOVWF  26
0282:  RCALL  0184
0284:  BTFSC  16.6
0286:  BSF    FF2.6
0288:  BTFSC  16.7
028A:  BSF    FF2.7
....................  
.................... for(i=0 ;i < 3; i++) 
028C:  CLRF   18
028E:  MOVF   18,W
0290:  SUBLW  02
0292:  BNC   02D0
0294:  CLRF   16
0296:  BTFSC  FF2.6
0298:  BSF    16.6
029A:  BCF    FF2.6
029C:  BTFSC  FF2.7
029E:  BSF    16.7
02A0:  BCF    FF2.7
....................    { 
....................     lcd_send_nibble(0x03); 
02A2:  MOVLW  03
02A4:  MOVWF  2D
02A6:  RCALL  00D6
02A8:  BTFSC  16.6
02AA:  BSF    FF2.6
02AC:  BTFSC  16.7
02AE:  BSF    FF2.7
02B0:  CLRF   16
02B2:  BTFSC  FF2.6
02B4:  BSF    16.6
02B6:  BCF    FF2.6
02B8:  BTFSC  FF2.7
02BA:  BSF    16.7
02BC:  BCF    FF2.7
....................     delay_ms(2); 
02BE:  MOVLW  02
02C0:  MOVWF  26
02C2:  RCALL  0184
02C4:  BTFSC  16.6
02C6:  BSF    FF2.6
02C8:  BTFSC  16.7
02CA:  BSF    FF2.7
02CC:  INCF   18,F
02CE:  BRA    028E
02D0:  CLRF   16
02D2:  BTFSC  FF2.6
02D4:  BSF    16.6
02D6:  BCF    FF2.6
02D8:  BTFSC  FF2.7
02DA:  BSF    16.7
02DC:  BCF    FF2.7
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
02DE:  MOVLW  02
02E0:  MOVWF  2D
02E2:  RCALL  00D6
02E4:  BTFSC  16.6
02E6:  BSF    FF2.6
02E8:  BTFSC  16.7
02EA:  BSF    FF2.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
02EC:  CLRF   18
02EE:  MOVF   18,W
02F0:  SUBLW  03
02F2:  BNC   0348
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
02F4:  CLRF   03
02F6:  MOVF   18,W
02F8:  MOVFF  FF2,19
02FC:  BCF    FF2.6
02FE:  BCF    FF2.7
0300:  RCALL  00A6
0302:  BTFSC  19.6
0304:  BSF    FF2.6
0306:  BTFSC  19.7
0308:  BSF    FF2.7
030A:  MOVWF  19
030C:  CLRF   16
030E:  BTFSC  FF2.6
0310:  BSF    16.6
0312:  BCF    FF2.6
0314:  BTFSC  FF2.7
0316:  BSF    16.7
0318:  BCF    FF2.7
031A:  CLRF   2A
031C:  MOVWF  2B
031E:  RCALL  0126
0320:  BTFSC  16.6
0322:  BSF    FF2.6
0324:  BTFSC  16.7
0326:  BSF    FF2.7
0328:  CLRF   16
032A:  BTFSC  FF2.6
032C:  BSF    16.6
032E:  BCF    FF2.6
0330:  BTFSC  FF2.7
0332:  BSF    16.7
0334:  BCF    FF2.7
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(1); 
0336:  MOVLW  01
0338:  MOVWF  26
033A:  RCALL  0184
033C:  BTFSC  16.6
033E:  BSF    FF2.6
0340:  BTFSC  16.7
0342:  BSF    FF2.7
0344:  INCF   18,F
0346:  BRA    02EE
....................     } 
0348:  GOTO   034E (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0162:  DECFSZ 27,W
0164:  BRA    0168
0166:  BRA    016E
....................    address = lcd_line_two; 
0168:  MOVLW  40
016A:  MOVWF  28
016C:  BRA    0170
.................... else 
....................    address=0; 
016E:  CLRF   28
....................  
.................... address += x-1; 
0170:  MOVLW  01
0172:  SUBWF  26,W
0174:  ADDWF  28,F
.................... lcd_send_byte(0, 0x80 | address); 
0176:  MOVF   28,W
0178:  IORLW  80
017A:  MOVWF  29
017C:  CLRF   2A
017E:  MOVWF  2B
0180:  RCALL  0126
0182:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
*
01B0:  MOVF   25,W
01B2:  XORLW  0C
01B4:  BZ    01C0
01B6:  XORLW  06
01B8:  BZ    01D0
01BA:  XORLW  02
01BC:  BZ    01DC
01BE:  BRA    01E6
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
01C0:  CLRF   2A
01C2:  MOVLW  01
01C4:  MOVWF  2B
01C6:  RCALL  0126
....................       delay_ms(1); 
01C8:  MOVLW  01
01CA:  MOVWF  26
01CC:  RCALL  0184
....................       break; 
01CE:  BRA    01F0
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
01D0:  MOVLW  01
01D2:  MOVWF  26
01D4:  MOVLW  02
01D6:  MOVWF  27
01D8:  RCALL  0162
....................        break; 
01DA:  BRA    01F0
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
01DC:  CLRF   2A
01DE:  MOVLW  10
01E0:  MOVWF  2B
01E2:  RCALL  0126
....................        break; 
01E4:  BRA    01F0
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
01E6:  MOVLW  01
01E8:  MOVWF  2A
01EA:  MOVFF  25,2B
01EE:  RCALL  0126
....................        break; 
....................    } 
01F0:  RETURN 0
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
.................... int counter; 
....................  
.................... void init(void){ 
....................  
....................    //set_tris_b(0x00); 
....................     
....................    //PORTB = 0; 
....................     
....................    lcd_init(); 
*
034C:  BRA    0264
....................     
....................    lcd_putc("\f"); 
034E:  MOVLW  CA
0350:  MOVWF  FF6
0352:  MOVLW  00
0354:  MOVWF  FF7
0356:  CLRF   16
0358:  BTFSC  FF2.6
035A:  BSF    16.6
035C:  BCF    FF2.6
035E:  BTFSC  FF2.7
0360:  BSF    16.7
0362:  BCF    FF2.7
0364:  RCALL  01F2
0366:  BTFSC  16.6
0368:  BSF    FF2.6
036A:  BTFSC  16.7
036C:  BSF    FF2.7
036E:  CLRF   16
0370:  BTFSC  FF2.6
0372:  BSF    16.6
0374:  BCF    FF2.6
0376:  BTFSC  FF2.7
0378:  BSF    16.7
037A:  BCF    FF2.7
....................     
....................    lcd_gotoxy(4,1); 
037C:  MOVLW  04
037E:  MOVWF  26
0380:  MOVLW  01
0382:  MOVWF  27
0384:  RCALL  0162
0386:  BTFSC  16.6
0388:  BSF    FF2.6
038A:  BTFSC  16.7
038C:  BSF    FF2.7
....................     
....................    lcd_putc(" MIKROLAB"); 
038E:  MOVLW  CC
0390:  MOVWF  FF6
0392:  MOVLW  00
0394:  MOVWF  FF7
0396:  CLRF   16
0398:  BTFSC  FF2.6
039A:  BSF    16.6
039C:  BCF    FF2.6
039E:  BTFSC  FF2.7
03A0:  BSF    16.7
03A2:  BCF    FF2.7
03A4:  RCALL  01F2
03A6:  BTFSC  16.6
03A8:  BSF    FF2.6
03AA:  BTFSC  16.7
03AC:  BSF    FF2.7
....................     
....................   SETUP_TIMER_0(T0_INTERNAL | T0_DIV_64 ); 
03AE:  MOVLW  85
03B0:  MOVWF  FD5
....................     
....................    enable_interrupts(INT_TIMER0);    
03B2:  BSF    FF2.5
....................     
....................    enable_interrupts(GLOBAL); 
03B4:  MOVLW  C0
03B6:  IORWF  FF2,F
....................     
....................    set_timer0(56161); 
03B8:  MOVLW  DB
03BA:  MOVWF  FD7
03BC:  MOVLW  61
03BE:  MOVWF  FD6
....................     
....................    counter = 0; 
03C0:  CLRF   17
03C2:  GOTO   03DC (RETURN)
.................... } 
....................  
.................... void main(void){ 
03C6:  CLRF   FF8
03C8:  BCF    FF1.2
03CA:  BSF    FD0.7
03CC:  BSF    07.7
03CE:  MOVF   FC1,W
03D0:  ANDLW  C0
03D2:  IORLW  0F
03D4:  MOVWF  FC1
03D6:  MOVLW  07
03D8:  MOVWF  FB4
....................    init(); 
03DA:  BRA    034C
....................    while(TRUE){} 
03DC:  BRA    03DC
.................... } 
....................  
....................  
.................... #INT_TIMER0     
....................  
03DE:  BRA    03DE
.................... void int_timer_0(void){ 
....................    set_timer0(56161); 
*
0212:  MOVLW  DB
0214:  MOVWF  FD7
0216:  MOVLW  61
0218:  MOVWF  FD6
....................     
....................    if(counter == 4){ 
021A:  MOVF   17,W
021C:  SUBLW  04
021E:  BNZ   0234
....................       lcd_gotoxy(5,2); 
0220:  MOVLW  05
0222:  MOVWF  26
0224:  MOVLW  02
0226:  MOVWF  27
0228:  RCALL  0162
....................       lcd_putc("*****"); 
022A:  MOVLW  58
022C:  MOVWF  FF6
022E:  MOVLW  02
0230:  MOVWF  FF7
0232:  RCALL  01F2
....................    } 
....................     
....................    if(counter ==8){ 
0234:  MOVF   17,W
0236:  SUBLW  08
0238:  BNZ   0250
....................       lcd_gotoxy(5,2); 
023A:  MOVLW  05
023C:  MOVWF  26
023E:  MOVLW  02
0240:  MOVWF  27
0242:  RCALL  0162
....................       lcd_putc("     "); 
0244:  MOVLW  5E
0246:  MOVWF  FF6
0248:  MOVLW  02
024A:  MOVWF  FF7
024C:  RCALL  01F2
....................       counter = 0; 
024E:  CLRF   17
....................    } 
....................    counter++; 
0250:  INCF   17,F
0252:  BCF    FF2.2
0254:  GOTO   0064
.................... } 
....................     

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
