CCS PCH C Compiler, Version 5.011, 5967               23-Απρ-24 18:16

               Filename:   C:\Users\D1_Station1\Desktop\Lab_07\Lab_07D\Source_code_proteus\source_code_proteus.lst

               ROM used:   1168 bytes (4%)
                           Largest free fragment is 30764
               RAM used:   25 (1%) at main() level
                           51 (3%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 30

*
0000:  GOTO   047A
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  FF2.5
005A:  GOTO   0064
005E:  BTFSC  FF2.2
0060:  GOTO   02FC
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... #include<main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
00A6:  MOVFF  FF2,0D
00AA:  BCF    FF2.6
00AC:  BCF    FF2.7
00AE:  CLRF   FF7
00B0:  ADDLW  C6
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  BTFSC  0D.6
00BE:  BSF    FF2.6
00C0:  BTFSC  0D.7
00C2:  BSF    FF2.7
00C4:  RETURN 0
00C6:  DATA 28,0C
00C8:  DATA 01,06
00CA:  DATA 0C,00
*
01E8:  TBLRD*+
01EA:  MOVF   FF5,F
01EC:  BZ    0206
01EE:  MOVFF  FF6,24
01F2:  MOVFF  FF7,25
01F6:  MOVFF  FF5,2A
01FA:  RCALL  01A6
01FC:  MOVFF  24,FF6
0200:  MOVFF  25,FF7
0204:  BRA    01E8
0206:  RETURN 0
0208:  TBLRD*+
020A:  MOVFF  FF6,25
020E:  MOVFF  FF7,26
0212:  MOVFF  FF5,2A
0216:  RCALL  01A6
0218:  MOVFF  25,FF6
021C:  MOVFF  26,FF7
0220:  DECFSZ 24,F
0222:  BRA    0208
0224:  GOTO   032C (RETURN)
0228:  MOVF   2B,W
022A:  CLRF   01
022C:  SUBWF  2A,W
022E:  BC    0236
0230:  MOVFF  2A,00
0234:  BRA    024E
0236:  CLRF   00
0238:  MOVLW  08
023A:  MOVWF  2C
023C:  RLCF   2A,F
023E:  RLCF   00,F
0240:  MOVF   2B,W
0242:  SUBWF  00,W
0244:  BTFSC  FD8.0
0246:  MOVWF  00
0248:  RLCF   01,F
024A:  DECFSZ 2C,F
024C:  BRA    023C
024E:  RETURN 0
0250:  MOVLW  20
0252:  BTFSS  25.4
0254:  MOVLW  30
0256:  MOVWF  26
0258:  MOVFF  24,00
025C:  BTFSS  24.7
025E:  BRA    0270
0260:  COMF   00,F
0262:  INCF   00,F
0264:  MOVFF  00,24
0268:  MOVLW  2D
026A:  MOVWF  26
026C:  BSF    25.7
026E:  BSF    25.0
0270:  MOVF   01,W
0272:  MOVFF  24,2A
0276:  MOVLW  64
0278:  MOVWF  2B
027A:  RCALL  0228
027C:  MOVFF  00,24
0280:  MOVLW  30
0282:  ADDWF  01,W
0284:  MOVWF  27
0286:  MOVFF  24,2A
028A:  MOVLW  0A
028C:  MOVWF  2B
028E:  RCALL  0228
0290:  MOVLW  30
0292:  ADDWF  00,W
0294:  MOVWF  29
0296:  MOVLW  30
0298:  ADDWF  01,W
029A:  MOVWF  28
029C:  MOVFF  26,00
02A0:  MOVLW  30
02A2:  SUBWF  27,W
02A4:  BZ    02AE
02A6:  BSF    25.1
02A8:  BTFSC  25.7
02AA:  BSF    25.2
02AC:  BRA    02D2
02AE:  MOVFF  26,27
02B2:  MOVLW  20
02B4:  MOVWF  26
02B6:  MOVLW  30
02B8:  SUBWF  28,W
02BA:  BZ    02C4
02BC:  BSF    25.0
02BE:  BTFSC  25.7
02C0:  BSF    25.1
02C2:  BRA    02D2
02C4:  BTFSS  FD8.2
02C6:  BSF    25.0
02C8:  BNZ   02D2
02CA:  MOVFF  27,28
02CE:  MOVLW  20
02D0:  MOVWF  27
02D2:  BTFSC  25.2
02D4:  BRA    02E0
02D6:  BTFSC  25.1
02D8:  BRA    02E6
02DA:  BTFSC  25.0
02DC:  BRA    02EC
02DE:  BRA    02F2
02E0:  MOVFF  26,2A
02E4:  RCALL  01A6
02E6:  MOVFF  27,2A
02EA:  RCALL  01A6
02EC:  MOVFF  28,2A
02F0:  RCALL  01A6
02F2:  MOVFF  29,2A
02F6:  RCALL  01A6
02F8:  GOTO   0336 (RETURN)
*
0346:  DATA 0C,00
0348:  DATA 20,53
034A:  DATA 65,63
034C:  DATA 6F,6E
034E:  DATA 64,73
0350:  DATA 3D,20
0352:  DATA 25,64
0354:  DATA 0A,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0158:  CLRF   FEA
015A:  MOVLW  2B
015C:  MOVWF  FE9
015E:  MOVF   FEF,W
0160:  BZ    0182
0162:  MOVLW  0F
0164:  MOVWF  01
0166:  MOVLW  BF
0168:  MOVWF  00
016A:  CLRWDT
016C:  DECFSZ 00,F
016E:  BRA    016A
0170:  DECFSZ 01,F
0172:  BRA    0166
0174:  MOVLW  8F
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  CLRWDT
017E:  DECFSZ FEF,F
0180:  BRA    0162
0182:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include<flex_lcd-proteus.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00CC:  BTFSC  32.0
00CE:  BRA    00D4
00D0:  BCF    F8A.4
00D2:  BRA    00D6
00D4:  BSF    F8A.4
00D6:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
00D8:  BTFSC  32.1
00DA:  BRA    00E0
00DC:  BCF    F8A.5
00DE:  BRA    00E2
00E0:  BSF    F8A.5
00E2:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
00E4:  BTFSC  32.2
00E6:  BRA    00EC
00E8:  BCF    F8A.6
00EA:  BRA    00EE
00EC:  BSF    F8A.6
00EE:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
00F0:  BTFSC  32.3
00F2:  BRA    00F8
00F4:  BCF    F8A.7
00F6:  BRA    00FA
00F8:  BSF    F8A.7
00FA:  BCF    F93.7
....................  
....................  delay_cycles(20); 
00FC:  MOVLW  06
00FE:  MOVWF  00
0100:  DECFSZ 00,F
0102:  BRA    0100
0104:  NOP   
....................  output_high(LCD_E); 
0106:  BCF    F93.3
0108:  BSF    F8A.3
....................  delay_us(50); 
010A:  CLRWDT
010C:  MOVLW  C7
010E:  MOVWF  00
0110:  DECFSZ 00,F
0112:  BRA    0110
0114:  NOP   
....................  output_low(LCD_E); 
0116:  BCF    F93.3
0118:  BCF    F8A.3
011A:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
011C:  BCF    F93.2
011E:  BCF    F8A.2
....................  
.................... if(address) 
0120:  MOVF   2F,F
0122:  BZ    012A
....................    output_high(LCD_RS); 
0124:  BCF    F93.2
0126:  BSF    F8A.2
0128:  BRA    012E
.................... else 
....................    output_low(LCD_RS); 
012A:  BCF    F93.2
012C:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
012E:  MOVLW  02
0130:  MOVWF  00
0132:  DECFSZ 00,F
0134:  BRA    0132
0136:  BRA    0138
0138:  NOP   
....................  
.................... output_low(LCD_E); 
013A:  BCF    F93.3
013C:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
013E:  SWAPF  30,W
0140:  MOVWF  31
0142:  MOVLW  0F
0144:  ANDWF  31,F
0146:  MOVFF  31,32
014A:  RCALL  00CC
.................... lcd_send_nibble(n & 0xf); 
014C:  MOVF   30,W
014E:  ANDLW  0F
0150:  MOVWF  31
0152:  MOVWF  32
0154:  RCALL  00CC
0156:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
0356:  BCF    F93.2
0358:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
035A:  BCF    F93.3
035C:  BCF    F8A.3
.................... output_low(LCD_RW);          
035E:  BCF    F93.1
0360:  BCF    F8A.1
0362:  CLRF   16
0364:  BTFSC  FF2.6
0366:  BSF    16.6
0368:  BCF    FF2.6
036A:  BTFSC  FF2.7
036C:  BSF    16.7
036E:  BCF    FF2.7
.................... delay_ms(10); 
0370:  MOVLW  0A
0372:  MOVWF  2B
0374:  RCALL  0158
0376:  BTFSC  16.6
0378:  BSF    FF2.6
037A:  BTFSC  16.7
037C:  BSF    FF2.7
....................  
.................... for(i=0 ;i < 3; i++) 
037E:  CLRF   19
0380:  MOVF   19,W
0382:  SUBLW  02
0384:  BNC   03C2
0386:  CLRF   16
0388:  BTFSC  FF2.6
038A:  BSF    16.6
038C:  BCF    FF2.6
038E:  BTFSC  FF2.7
0390:  BSF    16.7
0392:  BCF    FF2.7
....................    { 
....................     lcd_send_nibble(0x03); 
0394:  MOVLW  03
0396:  MOVWF  32
0398:  RCALL  00CC
039A:  BTFSC  16.6
039C:  BSF    FF2.6
039E:  BTFSC  16.7
03A0:  BSF    FF2.7
03A2:  CLRF   16
03A4:  BTFSC  FF2.6
03A6:  BSF    16.6
03A8:  BCF    FF2.6
03AA:  BTFSC  FF2.7
03AC:  BSF    16.7
03AE:  BCF    FF2.7
....................     delay_ms(2); 
03B0:  MOVLW  02
03B2:  MOVWF  2B
03B4:  RCALL  0158
03B6:  BTFSC  16.6
03B8:  BSF    FF2.6
03BA:  BTFSC  16.7
03BC:  BSF    FF2.7
03BE:  INCF   19,F
03C0:  BRA    0380
03C2:  CLRF   16
03C4:  BTFSC  FF2.6
03C6:  BSF    16.6
03C8:  BCF    FF2.6
03CA:  BTFSC  FF2.7
03CC:  BSF    16.7
03CE:  BCF    FF2.7
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
03D0:  MOVLW  02
03D2:  MOVWF  32
03D4:  RCALL  00CC
03D6:  BTFSC  16.6
03D8:  BSF    FF2.6
03DA:  BTFSC  16.7
03DC:  BSF    FF2.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
03DE:  CLRF   19
03E0:  MOVF   19,W
03E2:  SUBLW  03
03E4:  BNC   043A
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
03E6:  CLRF   03
03E8:  MOVF   19,W
03EA:  MOVFF  FF2,1A
03EE:  BCF    FF2.6
03F0:  BCF    FF2.7
03F2:  RCALL  00A6
03F4:  BTFSC  1A.6
03F6:  BSF    FF2.6
03F8:  BTFSC  1A.7
03FA:  BSF    FF2.7
03FC:  MOVWF  1A
03FE:  CLRF   16
0400:  BTFSC  FF2.6
0402:  BSF    16.6
0404:  BCF    FF2.6
0406:  BTFSC  FF2.7
0408:  BSF    16.7
040A:  BCF    FF2.7
040C:  CLRF   2F
040E:  MOVWF  30
0410:  RCALL  011C
0412:  BTFSC  16.6
0414:  BSF    FF2.6
0416:  BTFSC  16.7
0418:  BSF    FF2.7
041A:  CLRF   16
041C:  BTFSC  FF2.6
041E:  BSF    16.6
0420:  BCF    FF2.6
0422:  BTFSC  FF2.7
0424:  BSF    16.7
0426:  BCF    FF2.7
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(1); 
0428:  MOVLW  01
042A:  MOVWF  2B
042C:  RCALL  0158
042E:  BTFSC  16.6
0430:  BSF    FF2.6
0432:  BTFSC  16.7
0434:  BSF    FF2.7
0436:  INCF   19,F
0438:  BRA    03E0
....................     } 
043A:  GOTO   0440 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0184:  DECFSZ 2C,W
0186:  BRA    018A
0188:  BRA    0190
....................    address = lcd_line_two; 
018A:  MOVLW  40
018C:  MOVWF  2D
018E:  BRA    0192
.................... else 
....................    address=0; 
0190:  CLRF   2D
....................  
.................... address += x-1; 
0192:  MOVLW  01
0194:  SUBWF  2B,W
0196:  ADDWF  2D,F
.................... lcd_send_byte(0, 0x80 | address); 
0198:  MOVF   2D,W
019A:  IORLW  80
019C:  MOVWF  2E
019E:  CLRF   2F
01A0:  MOVWF  30
01A2:  RCALL  011C
01A4:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
01A6:  MOVF   2A,W
01A8:  XORLW  0C
01AA:  BZ    01B6
01AC:  XORLW  06
01AE:  BZ    01C6
01B0:  XORLW  02
01B2:  BZ    01D2
01B4:  BRA    01DC
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
01B6:  CLRF   2F
01B8:  MOVLW  01
01BA:  MOVWF  30
01BC:  RCALL  011C
....................       delay_ms(1); 
01BE:  MOVLW  01
01C0:  MOVWF  2B
01C2:  RCALL  0158
....................       break; 
01C4:  BRA    01E6
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
01C6:  MOVLW  01
01C8:  MOVWF  2B
01CA:  MOVLW  02
01CC:  MOVWF  2C
01CE:  RCALL  0184
....................        break; 
01D0:  BRA    01E6
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
01D2:  CLRF   2F
01D4:  MOVLW  10
01D6:  MOVWF  30
01D8:  RCALL  011C
....................        break; 
01DA:  BRA    01E6
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
01DC:  MOVLW  01
01DE:  MOVWF  2F
01E0:  MOVFF  2A,30
01E4:  RCALL  011C
....................        break; 
....................    } 
01E6:  RETURN 0
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
.................... int counter; 
....................  
.................... int seconds; 
....................  
.................... void init(void){ 
....................  
....................    lcd_init(); 
*
043E:  BRA    0356
....................     
....................    lcd_putc("\f"); 
0440:  MOVLW  CA
0442:  MOVWF  FF6
0444:  MOVLW  00
0446:  MOVWF  FF7
0448:  CLRF   16
044A:  BTFSC  FF2.6
044C:  BSF    16.6
044E:  BCF    FF2.6
0450:  BTFSC  FF2.7
0452:  BSF    16.7
0454:  BCF    FF2.7
0456:  RCALL  01E8
0458:  BTFSC  16.6
045A:  BSF    FF2.6
045C:  BTFSC  16.7
045E:  BSF    FF2.7
....................     
....................    //lcd_gotoxy(5,1); 
....................     
....................    //lcd_putc(" Seconds:"); 
....................     
....................   SETUP_TIMER_0(T0_INTERNAL | T0_DIV_64 ); 
0460:  MOVLW  85
0462:  MOVWF  FD5
....................     
....................    enable_interrupts(INT_TIMER0);    
0464:  BSF    FF2.5
....................     
....................    enable_interrupts(GLOBAL); 
0466:  MOVLW  C0
0468:  IORWF  FF2,F
....................     
....................    set_timer0(56161); 
046A:  MOVLW  DB
046C:  MOVWF  FD7
046E:  MOVLW  61
0470:  MOVWF  FD6
....................     
....................    counter = 0; 
0472:  CLRF   17
....................     
....................    seconds =0; 
0474:  CLRF   18
0476:  GOTO   0490 (RETURN)
.................... } 
....................  
.................... void main(void){ 
047A:  CLRF   FF8
047C:  BCF    FF1.2
047E:  BSF    FD0.7
0480:  BSF    07.7
0482:  MOVF   FC1,W
0484:  ANDLW  C0
0486:  IORLW  0F
0488:  MOVWF  FC1
048A:  MOVLW  07
048C:  MOVWF  FB4
....................    init(); 
048E:  BRA    043E
....................    while(TRUE){} 
0490:  BRA    0490
.................... } 
....................  
....................  
.................... #INT_TIMER0     
....................  
0492:  BRA    0492
.................... void int_timer_0(void){ 
....................    set_timer0(56161); 
*
02FC:  MOVLW  DB
02FE:  MOVWF  FD7
0300:  MOVLW  61
0302:  MOVWF  FD6
....................     
....................    if(counter == 10){ 
0304:  MOVF   17,W
0306:  SUBLW  0A
0308:  BNZ   033E
....................       lcd_putc("\f"); 
030A:  MOVLW  46
030C:  MOVWF  FF6
030E:  MOVLW  03
0310:  MOVWF  FF7
0312:  RCALL  01E8
....................       lcd_gotoxy(5,2); 
0314:  MOVLW  05
0316:  MOVWF  2B
0318:  MOVLW  02
031A:  MOVWF  2C
031C:  RCALL  0184
....................       printf(lcd_putc," Seconds= %d\n",seconds); 
031E:  MOVLW  48
0320:  MOVWF  FF6
0322:  MOVLW  03
0324:  MOVWF  FF7
0326:  MOVLW  0A
0328:  MOVWF  24
032A:  BRA    0208
032C:  MOVFF  18,24
0330:  MOVLW  18
0332:  MOVWF  25
0334:  BRA    0250
0336:  MOVLW  0A
0338:  MOVWF  2A
033A:  RCALL  01A6
....................       seconds++; 
033C:  INCF   18,F
....................    } 
....................     
....................    counter++; 
033E:  INCF   17,F
0340:  BCF    FF2.2
0342:  GOTO   0064
.................... } 
....................     

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
