CCS PCH C Compiler, Version 5.011, 5967               23-Απρ-24 18:19

               Filename:   C:\Users\D1_Station1\Desktop\Lab_07\Lab_07D\Source_code\source_code.lst

               ROM used:   1164 bytes (4%)
                           Largest free fragment is 29552
               RAM used:   25 (1%) at main() level
                           51 (2%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
0800:  GOTO   0C76
*
0808:  NOP   
080A:  NOP   
080C:  NOP   
080E:  NOP   
0810:  NOP   
0812:  NOP   
0814:  NOP   
0816:  NOP   
0818:  MOVWF  04
081A:  MOVFF  FD8,05
081E:  MOVFF  FE0,06
0822:  MOVLB  0
0824:  MOVFF  FE9,0C
0828:  MOVFF  FEA,07
082C:  MOVFF  FE1,08
0830:  MOVFF  FE2,09
0834:  MOVFF  FD9,0A
0838:  MOVFF  FDA,0B
083C:  MOVFF  FF3,12
0840:  MOVFF  FF4,13
0844:  MOVFF  FFA,14
0848:  MOVFF  00,0E
084C:  MOVFF  01,0F
0850:  MOVFF  02,10
0854:  MOVFF  03,11
0858:  BTFSS  FF2.5
085A:  GOTO   0864
085E:  BTFSC  FF2.2
0860:  GOTO   0AFC
0864:  MOVFF  0E,00
0868:  MOVFF  0F,01
086C:  MOVFF  10,02
0870:  MOVFF  11,03
0874:  MOVFF  0C,FE9
0878:  MOVFF  07,FEA
087C:  BSF    07.7
087E:  MOVFF  08,FE1
0882:  MOVFF  09,FE2
0886:  MOVFF  0A,FD9
088A:  MOVFF  0B,FDA
088E:  MOVFF  12,FF3
0892:  MOVFF  13,FF4
0896:  MOVFF  14,FFA
089A:  MOVF   04,W
089C:  MOVFF  06,FE0
08A0:  MOVFF  05,FD8
08A4:  RETFIE 0
.................... #include<main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
08A6:  MOVFF  FF2,0D
08AA:  BCF    FF2.6
08AC:  BCF    FF2.7
08AE:  CLRF   FF7
08B0:  ADDLW  C6
08B2:  MOVWF  FF6
08B4:  MOVLW  08
08B6:  ADDWFC FF7,F
08B8:  TBLRD*+
08BA:  MOVF   FF5,W
08BC:  BTFSC  0D.6
08BE:  BSF    FF2.6
08C0:  BTFSC  0D.7
08C2:  BSF    FF2.7
08C4:  RETURN 0
08C6:  DATA 28,0C
08C8:  DATA 01,06
08CA:  DATA 0C,00
*
09E8:  TBLRD*+
09EA:  MOVF   FF5,F
09EC:  BZ    0A06
09EE:  MOVFF  FF6,24
09F2:  MOVFF  FF7,25
09F6:  MOVFF  FF5,2A
09FA:  RCALL  09A6
09FC:  MOVFF  24,FF6
0A00:  MOVFF  25,FF7
0A04:  BRA    09E8
0A06:  RETURN 0
0A08:  TBLRD*+
0A0A:  MOVFF  FF6,25
0A0E:  MOVFF  FF7,26
0A12:  MOVFF  FF5,2A
0A16:  RCALL  09A6
0A18:  MOVFF  25,FF6
0A1C:  MOVFF  26,FF7
0A20:  DECFSZ 24,F
0A22:  BRA    0A08
0A24:  GOTO   0B2C (RETURN)
0A28:  MOVF   2B,W
0A2A:  CLRF   01
0A2C:  SUBWF  2A,W
0A2E:  BC    0A36
0A30:  MOVFF  2A,00
0A34:  BRA    0A4E
0A36:  CLRF   00
0A38:  MOVLW  08
0A3A:  MOVWF  2C
0A3C:  RLCF   2A,F
0A3E:  RLCF   00,F
0A40:  MOVF   2B,W
0A42:  SUBWF  00,W
0A44:  BTFSC  FD8.0
0A46:  MOVWF  00
0A48:  RLCF   01,F
0A4A:  DECFSZ 2C,F
0A4C:  BRA    0A3C
0A4E:  RETURN 0
0A50:  MOVLW  20
0A52:  BTFSS  25.4
0A54:  MOVLW  30
0A56:  MOVWF  26
0A58:  MOVFF  24,00
0A5C:  BTFSS  24.7
0A5E:  BRA    0A70
0A60:  COMF   00,F
0A62:  INCF   00,F
0A64:  MOVFF  00,24
0A68:  MOVLW  2D
0A6A:  MOVWF  26
0A6C:  BSF    25.7
0A6E:  BSF    25.0
0A70:  MOVF   01,W
0A72:  MOVFF  24,2A
0A76:  MOVLW  64
0A78:  MOVWF  2B
0A7A:  RCALL  0A28
0A7C:  MOVFF  00,24
0A80:  MOVLW  30
0A82:  ADDWF  01,W
0A84:  MOVWF  27
0A86:  MOVFF  24,2A
0A8A:  MOVLW  0A
0A8C:  MOVWF  2B
0A8E:  RCALL  0A28
0A90:  MOVLW  30
0A92:  ADDWF  00,W
0A94:  MOVWF  29
0A96:  MOVLW  30
0A98:  ADDWF  01,W
0A9A:  MOVWF  28
0A9C:  MOVFF  26,00
0AA0:  MOVLW  30
0AA2:  SUBWF  27,W
0AA4:  BZ    0AAE
0AA6:  BSF    25.1
0AA8:  BTFSC  25.7
0AAA:  BSF    25.2
0AAC:  BRA    0AD2
0AAE:  MOVFF  26,27
0AB2:  MOVLW  20
0AB4:  MOVWF  26
0AB6:  MOVLW  30
0AB8:  SUBWF  28,W
0ABA:  BZ    0AC4
0ABC:  BSF    25.0
0ABE:  BTFSC  25.7
0AC0:  BSF    25.1
0AC2:  BRA    0AD2
0AC4:  BTFSS  FD8.2
0AC6:  BSF    25.0
0AC8:  BNZ   0AD2
0ACA:  MOVFF  27,28
0ACE:  MOVLW  20
0AD0:  MOVWF  27
0AD2:  BTFSC  25.2
0AD4:  BRA    0AE0
0AD6:  BTFSC  25.1
0AD8:  BRA    0AE6
0ADA:  BTFSC  25.0
0ADC:  BRA    0AEC
0ADE:  BRA    0AF2
0AE0:  MOVFF  26,2A
0AE4:  RCALL  09A6
0AE6:  MOVFF  27,2A
0AEA:  RCALL  09A6
0AEC:  MOVFF  28,2A
0AF0:  RCALL  09A6
0AF2:  MOVFF  29,2A
0AF6:  RCALL  09A6
0AF8:  GOTO   0B36 (RETURN)
*
0B46:  DATA 0C,00
0B48:  DATA 20,53
0B4A:  DATA 65,63
0B4C:  DATA 6F,6E
0B4E:  DATA 64,73
0B50:  DATA 3D,20
0B52:  DATA 25,64
0B54:  DATA 0A,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0958:  CLRF   FEA
095A:  MOVLW  2B
095C:  MOVWF  FE9
095E:  MOVF   FEF,W
0960:  BZ    0982
0962:  MOVLW  0F
0964:  MOVWF  01
0966:  MOVLW  BF
0968:  MOVWF  00
096A:  CLRWDT
096C:  DECFSZ 00,F
096E:  BRA    096A
0970:  DECFSZ 01,F
0972:  BRA    0966
0974:  MOVLW  8F
0976:  MOVWF  00
0978:  DECFSZ 00,F
097A:  BRA    0978
097C:  CLRWDT
097E:  DECFSZ FEF,F
0980:  BRA    0962
0982:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include<flex_lcd.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
08CC:  BTFSC  32.0
08CE:  BRA    08D4
08D0:  BCF    F8A.4
08D2:  BRA    08D6
08D4:  BSF    F8A.4
08D6:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
08D8:  BTFSC  32.1
08DA:  BRA    08E0
08DC:  BCF    F8A.5
08DE:  BRA    08E2
08E0:  BSF    F8A.5
08E2:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
08E4:  BTFSC  32.2
08E6:  BRA    08EC
08E8:  BCF    F8A.6
08EA:  BRA    08EE
08EC:  BSF    F8A.6
08EE:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
08F0:  BTFSC  32.3
08F2:  BRA    08F8
08F4:  BCF    F8A.7
08F6:  BRA    08FA
08F8:  BSF    F8A.7
08FA:  BCF    F93.7
....................  
....................  delay_cycles(20); 
08FC:  MOVLW  06
08FE:  MOVWF  00
0900:  DECFSZ 00,F
0902:  BRA    0900
0904:  NOP   
....................  output_high(LCD_E); 
0906:  BCF    F93.3
0908:  BSF    F8A.3
....................  delay_us(50); 
090A:  CLRWDT
090C:  MOVLW  C7
090E:  MOVWF  00
0910:  DECFSZ 00,F
0912:  BRA    0910
0914:  NOP   
....................  output_low(LCD_E); 
0916:  BCF    F93.3
0918:  BCF    F8A.3
091A:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
091C:  BCF    F93.2
091E:  BCF    F8A.2
....................  
.................... if(address) 
0920:  MOVF   2F,F
0922:  BZ    092A
....................    output_high(LCD_RS); 
0924:  BCF    F93.2
0926:  BSF    F8A.2
0928:  BRA    092E
.................... else 
....................    output_low(LCD_RS); 
092A:  BCF    F93.2
092C:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
092E:  MOVLW  02
0930:  MOVWF  00
0932:  DECFSZ 00,F
0934:  BRA    0932
0936:  BRA    0938
0938:  NOP   
....................  
.................... output_low(LCD_E); 
093A:  BCF    F93.3
093C:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
093E:  SWAPF  30,W
0940:  MOVWF  31
0942:  MOVLW  0F
0944:  ANDWF  31,F
0946:  MOVFF  31,32
094A:  RCALL  08CC
.................... lcd_send_nibble(n & 0xf); 
094C:  MOVF   30,W
094E:  ANDLW  0F
0950:  MOVWF  31
0952:  MOVWF  32
0954:  RCALL  08CC
0956:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
0B56:  BCF    F93.2
0B58:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
0B5A:  BCF    F93.3
0B5C:  BCF    F8A.3
0B5E:  CLRF   16
0B60:  BTFSC  FF2.6
0B62:  BSF    16.6
0B64:  BCF    FF2.6
0B66:  BTFSC  FF2.7
0B68:  BSF    16.7
0B6A:  BCF    FF2.7
....................  
.................... delay_ms(200); 
0B6C:  MOVLW  C8
0B6E:  MOVWF  2B
0B70:  RCALL  0958
0B72:  BTFSC  16.6
0B74:  BSF    FF2.6
0B76:  BTFSC  16.7
0B78:  BSF    FF2.7
....................  
.................... for(i=0 ;i < 3; i++) 
0B7A:  CLRF   19
0B7C:  MOVF   19,W
0B7E:  SUBLW  02
0B80:  BNC   0BBE
0B82:  CLRF   16
0B84:  BTFSC  FF2.6
0B86:  BSF    16.6
0B88:  BCF    FF2.6
0B8A:  BTFSC  FF2.7
0B8C:  BSF    16.7
0B8E:  BCF    FF2.7
....................    { 
....................     lcd_send_nibble(0x03); 
0B90:  MOVLW  03
0B92:  MOVWF  32
0B94:  RCALL  08CC
0B96:  BTFSC  16.6
0B98:  BSF    FF2.6
0B9A:  BTFSC  16.7
0B9C:  BSF    FF2.7
0B9E:  CLRF   16
0BA0:  BTFSC  FF2.6
0BA2:  BSF    16.6
0BA4:  BCF    FF2.6
0BA6:  BTFSC  FF2.7
0BA8:  BSF    16.7
0BAA:  BCF    FF2.7
....................     delay_ms(10); 
0BAC:  MOVLW  0A
0BAE:  MOVWF  2B
0BB0:  RCALL  0958
0BB2:  BTFSC  16.6
0BB4:  BSF    FF2.6
0BB6:  BTFSC  16.7
0BB8:  BSF    FF2.7
0BBA:  INCF   19,F
0BBC:  BRA    0B7C
0BBE:  CLRF   16
0BC0:  BTFSC  FF2.6
0BC2:  BSF    16.6
0BC4:  BCF    FF2.6
0BC6:  BTFSC  FF2.7
0BC8:  BSF    16.7
0BCA:  BCF    FF2.7
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
0BCC:  MOVLW  02
0BCE:  MOVWF  32
0BD0:  RCALL  08CC
0BD2:  BTFSC  16.6
0BD4:  BSF    FF2.6
0BD6:  BTFSC  16.7
0BD8:  BSF    FF2.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0BDA:  CLRF   19
0BDC:  MOVF   19,W
0BDE:  SUBLW  03
0BE0:  BNC   0C36
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0BE2:  CLRF   03
0BE4:  MOVF   19,W
0BE6:  MOVFF  FF2,1A
0BEA:  BCF    FF2.6
0BEC:  BCF    FF2.7
0BEE:  RCALL  08A6
0BF0:  BTFSC  1A.6
0BF2:  BSF    FF2.6
0BF4:  BTFSC  1A.7
0BF6:  BSF    FF2.7
0BF8:  MOVWF  1A
0BFA:  CLRF   16
0BFC:  BTFSC  FF2.6
0BFE:  BSF    16.6
0C00:  BCF    FF2.6
0C02:  BTFSC  FF2.7
0C04:  BSF    16.7
0C06:  BCF    FF2.7
0C08:  CLRF   2F
0C0A:  MOVWF  30
0C0C:  RCALL  091C
0C0E:  BTFSC  16.6
0C10:  BSF    FF2.6
0C12:  BTFSC  16.7
0C14:  BSF    FF2.7
0C16:  CLRF   16
0C18:  BTFSC  FF2.6
0C1A:  BSF    16.6
0C1C:  BCF    FF2.6
0C1E:  BTFSC  FF2.7
0C20:  BSF    16.7
0C22:  BCF    FF2.7
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(10); 
0C24:  MOVLW  0A
0C26:  MOVWF  2B
0C28:  RCALL  0958
0C2A:  BTFSC  16.6
0C2C:  BSF    FF2.6
0C2E:  BTFSC  16.7
0C30:  BSF    FF2.7
0C32:  INCF   19,F
0C34:  BRA    0BDC
....................     } 
0C36:  GOTO   0C3C (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0984:  DECFSZ 2C,W
0986:  BRA    098A
0988:  BRA    0990
....................    address = lcd_line_two; 
098A:  MOVLW  40
098C:  MOVWF  2D
098E:  BRA    0992
.................... else 
....................    address=0; 
0990:  CLRF   2D
....................  
.................... address += x-1; 
0992:  MOVLW  01
0994:  SUBWF  2B,W
0996:  ADDWF  2D,F
.................... lcd_send_byte(0, 0x80 | address); 
0998:  MOVF   2D,W
099A:  IORLW  80
099C:  MOVWF  2E
099E:  CLRF   2F
09A0:  MOVWF  30
09A2:  RCALL  091C
09A4:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
09A6:  MOVF   2A,W
09A8:  XORLW  0C
09AA:  BZ    09B6
09AC:  XORLW  06
09AE:  BZ    09C6
09B0:  XORLW  02
09B2:  BZ    09D2
09B4:  BRA    09DC
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
09B6:  CLRF   2F
09B8:  MOVLW  01
09BA:  MOVWF  30
09BC:  RCALL  091C
....................       delay_ms(4); 
09BE:  MOVLW  04
09C0:  MOVWF  2B
09C2:  RCALL  0958
....................       break; 
09C4:  BRA    09E6
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
09C6:  MOVLW  01
09C8:  MOVWF  2B
09CA:  MOVLW  02
09CC:  MOVWF  2C
09CE:  RCALL  0984
....................        break; 
09D0:  BRA    09E6
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
09D2:  CLRF   2F
09D4:  MOVLW  10
09D6:  MOVWF  30
09D8:  RCALL  091C
....................        break; 
09DA:  BRA    09E6
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
09DC:  MOVLW  01
09DE:  MOVWF  2F
09E0:  MOVFF  2A,30
09E4:  RCALL  091C
....................        break; 
....................    } 
09E6:  RETURN 0
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
.................... int counter; 
....................  
.................... int seconds; 
....................  
.................... void init(void){ 
....................  
....................    lcd_init(); 
*
0C3A:  BRA    0B56
....................     
....................    lcd_putc("\f"); 
0C3C:  MOVLW  CA
0C3E:  MOVWF  FF6
0C40:  MOVLW  08
0C42:  MOVWF  FF7
0C44:  CLRF   16
0C46:  BTFSC  FF2.6
0C48:  BSF    16.6
0C4A:  BCF    FF2.6
0C4C:  BTFSC  FF2.7
0C4E:  BSF    16.7
0C50:  BCF    FF2.7
0C52:  RCALL  09E8
0C54:  BTFSC  16.6
0C56:  BSF    FF2.6
0C58:  BTFSC  16.7
0C5A:  BSF    FF2.7
....................     
....................    //lcd_gotoxy(5,1); 
....................     
....................    //lcd_putc(" Seconds:"); 
....................     
....................   SETUP_TIMER_0(T0_INTERNAL | T0_DIV_64 ); 
0C5C:  MOVLW  85
0C5E:  MOVWF  FD5
....................     
....................    enable_interrupts(INT_TIMER0);    
0C60:  BSF    FF2.5
....................     
....................    enable_interrupts(GLOBAL); 
0C62:  MOVLW  C0
0C64:  IORWF  FF2,F
....................     
....................    set_timer0(56161); 
0C66:  MOVLW  DB
0C68:  MOVWF  FD7
0C6A:  MOVLW  61
0C6C:  MOVWF  FD6
....................     
....................    counter = 0; 
0C6E:  CLRF   17
....................     
....................    seconds =0; 
0C70:  CLRF   18
0C72:  GOTO   0C8C (RETURN)
.................... } 
....................  
.................... void main(void){ 
0C76:  CLRF   FF8
0C78:  BCF    FF1.2
0C7A:  BSF    FD0.7
0C7C:  BSF    07.7
0C7E:  MOVF   FC1,W
0C80:  ANDLW  C0
0C82:  IORLW  0F
0C84:  MOVWF  FC1
0C86:  MOVLW  07
0C88:  MOVWF  FB4
....................    init(); 
0C8A:  BRA    0C3A
....................    while(TRUE){} 
0C8C:  BRA    0C8C
.................... } 
....................  
....................  
.................... #INT_TIMER0     
....................  
0C8E:  SLEEP 
.................... void int_timer_0(void){ 
....................    set_timer0(56161); 
*
0AFC:  MOVLW  DB
0AFE:  MOVWF  FD7
0B00:  MOVLW  61
0B02:  MOVWF  FD6
....................     
....................    if(counter == 8){ 
0B04:  MOVF   17,W
0B06:  SUBLW  08
0B08:  BNZ   0B3E
....................       lcd_putc("\f"); 
0B0A:  MOVLW  46
0B0C:  MOVWF  FF6
0B0E:  MOVLW  0B
0B10:  MOVWF  FF7
0B12:  RCALL  09E8
....................       lcd_gotoxy(5,2); 
0B14:  MOVLW  05
0B16:  MOVWF  2B
0B18:  MOVLW  02
0B1A:  MOVWF  2C
0B1C:  RCALL  0984
....................       printf(lcd_putc," Seconds= %d\n",seconds); 
0B1E:  MOVLW  48
0B20:  MOVWF  FF6
0B22:  MOVLW  0B
0B24:  MOVWF  FF7
0B26:  MOVLW  0A
0B28:  MOVWF  24
0B2A:  BRA    0A08
0B2C:  MOVFF  18,24
0B30:  MOVLW  18
0B32:  MOVWF  25
0B34:  BRA    0A50
0B36:  MOVLW  0A
0B38:  MOVWF  2A
0B3A:  RCALL  09A6
....................       seconds++; 
0B3C:  INCF   18,F
....................    } 
....................     
....................    counter++; 
0B3E:  INCF   17,F
0B40:  BCF    FF2.2
0B42:  GOTO   0864
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
