CCS PCH C Compiler, Version 5.011, 5967               23-Απρ-24 16:52

               Filename:   C:\Users\D1_Station1\Desktop\Lab_07\Source_code\source_code.lst

               ROM used:   530 bytes (2%)
                           Largest free fragment is 30186
               RAM used:   4 (0%) at main() level
                           15 (1%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0800:  GOTO   09CE
.................... #include<main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
*
0808:  CLRF   FF7
080A:  ADDLW  18
080C:  MOVWF  FF6
080E:  MOVLW  08
0810:  ADDWFC FF7,F
0812:  TBLRD*+
0814:  MOVF   FF5,W
0816:  RETURN 0
0818:  DATA 28,0C
081A:  DATA 01,06
081C:  DATA 0C,00
081E:  DATA 45,6C
0820:  DATA 65,63
0822:  DATA 74,72
0824:  DATA 6F,6E
0826:  DATA 69,63
0828:  DATA 73,00
082A:  DATA 2A,2A
082C:  DATA 2A,2A
082E:  DATA 2A,00
*
09AE:  TBLRD*+
09B0:  MOVF   FF5,F
09B2:  BZ    09CC
09B4:  MOVFF  FF6,05
09B8:  MOVFF  FF7,06
09BC:  MOVFF  FF5,07
09C0:  BRA    096A
09C2:  MOVFF  05,FF6
09C6:  MOVFF  06,FF7
09CA:  BRA    09AE
09CC:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0830:  CLRF   FEA
0832:  MOVLW  08
0834:  MOVWF  FE9
0836:  MOVF   FEF,W
0838:  BZ    085A
083A:  MOVLW  0F
083C:  MOVWF  01
083E:  MOVLW  BF
0840:  MOVWF  00
0842:  CLRWDT
0844:  DECFSZ 00,F
0846:  BRA    0842
0848:  DECFSZ 01,F
084A:  BRA    083E
084C:  MOVLW  8F
084E:  MOVWF  00
0850:  DECFSZ 00,F
0852:  BRA    0850
0854:  CLRWDT
0856:  DECFSZ FEF,F
0858:  BRA    083A
085A:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include<flex_lcd.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
085C:  BTFSC  0F.0
085E:  BRA    0864
0860:  BCF    F8A.4
0862:  BRA    0866
0864:  BSF    F8A.4
0866:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0868:  BTFSC  0F.1
086A:  BRA    0870
086C:  BCF    F8A.5
086E:  BRA    0872
0870:  BSF    F8A.5
0872:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
0874:  BTFSC  0F.2
0876:  BRA    087C
0878:  BCF    F8A.6
087A:  BRA    087E
087C:  BSF    F8A.6
087E:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
0880:  BTFSC  0F.3
0882:  BRA    0888
0884:  BCF    F8A.7
0886:  BRA    088A
0888:  BSF    F8A.7
088A:  BCF    F93.7
....................  
....................  delay_cycles(20); 
088C:  MOVLW  06
088E:  MOVWF  00
0890:  DECFSZ 00,F
0892:  BRA    0890
0894:  NOP   
....................  output_high(LCD_E); 
0896:  BCF    F93.3
0898:  BSF    F8A.3
....................  delay_us(50); 
089A:  CLRWDT
089C:  MOVLW  C7
089E:  MOVWF  00
08A0:  DECFSZ 00,F
08A2:  BRA    08A0
08A4:  NOP   
....................  output_low(LCD_E); 
08A6:  BCF    F93.3
08A8:  BCF    F8A.3
08AA:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
08AC:  BCF    F93.2
08AE:  BCF    F8A.2
....................  
.................... if(address) 
08B0:  MOVF   0C,F
08B2:  BZ    08BA
....................    output_high(LCD_RS); 
08B4:  BCF    F93.2
08B6:  BSF    F8A.2
08B8:  BRA    08BE
.................... else 
....................    output_low(LCD_RS); 
08BA:  BCF    F93.2
08BC:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
08BE:  MOVLW  02
08C0:  MOVWF  00
08C2:  DECFSZ 00,F
08C4:  BRA    08C2
08C6:  BRA    08C8
08C8:  NOP   
....................  
.................... output_low(LCD_E); 
08CA:  BCF    F93.3
08CC:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
08CE:  SWAPF  0D,W
08D0:  MOVWF  0E
08D2:  MOVLW  0F
08D4:  ANDWF  0E,F
08D6:  MOVFF  0E,0F
08DA:  RCALL  085C
.................... lcd_send_nibble(n & 0xf); 
08DC:  MOVF   0D,W
08DE:  ANDLW  0F
08E0:  MOVWF  0E
08E2:  MOVWF  0F
08E4:  RCALL  085C
08E6:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
08E8:  BCF    F93.2
08EA:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
08EC:  BCF    F93.3
08EE:  BCF    F8A.3
....................  
.................... delay_ms(200); 
08F0:  MOVLW  C8
08F2:  MOVWF  08
08F4:  RCALL  0830
....................  
.................... for(i=0 ;i < 3; i++) 
08F6:  CLRF   05
08F8:  MOVF   05,W
08FA:  SUBLW  02
08FC:  BNC   090E
....................    { 
....................     lcd_send_nibble(0x03); 
08FE:  MOVLW  03
0900:  MOVWF  0F
0902:  RCALL  085C
....................     delay_ms(10); 
0904:  MOVLW  0A
0906:  MOVWF  08
0908:  RCALL  0830
090A:  INCF   05,F
090C:  BRA    08F8
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
090E:  MOVLW  02
0910:  MOVWF  0F
0912:  RCALL  085C
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0914:  CLRF   05
0916:  MOVF   05,W
0918:  SUBLW  03
091A:  BNC   0944
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
091C:  CLRF   03
091E:  MOVF   05,W
0920:  MOVFF  FF2,06
0924:  BCF    FF2.6
0926:  BCF    FF2.7
0928:  RCALL  0808
092A:  BTFSC  06.6
092C:  BSF    FF2.6
092E:  BTFSC  06.7
0930:  BSF    FF2.7
0932:  MOVWF  06
0934:  CLRF   0C
0936:  MOVWF  0D
0938:  RCALL  08AC
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(10); 
093A:  MOVLW  0A
093C:  MOVWF  08
093E:  RCALL  0830
0940:  INCF   05,F
0942:  BRA    0916
....................     } 
0944:  GOTO   09E0 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
0948:  DECFSZ 09,W
094A:  BRA    094E
094C:  BRA    0954
....................    address = lcd_line_two; 
094E:  MOVLW  40
0950:  MOVWF  0A
0952:  BRA    0956
.................... else 
....................    address=0; 
0954:  CLRF   0A
....................  
.................... address += x-1; 
0956:  MOVLW  01
0958:  SUBWF  08,W
095A:  ADDWF  0A,F
.................... lcd_send_byte(0, 0x80 | address); 
095C:  MOVF   0A,W
095E:  IORLW  80
0960:  MOVWF  0B
0962:  CLRF   0C
0964:  MOVWF  0D
0966:  RCALL  08AC
0968:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
096A:  MOVF   07,W
096C:  XORLW  0C
096E:  BZ    097A
0970:  XORLW  06
0972:  BZ    098A
0974:  XORLW  02
0976:  BZ    0996
0978:  BRA    09A0
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
097A:  CLRF   0C
097C:  MOVLW  01
097E:  MOVWF  0D
0980:  RCALL  08AC
....................       delay_ms(4); 
0982:  MOVLW  04
0984:  MOVWF  08
0986:  RCALL  0830
....................       break; 
0988:  BRA    09AA
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
098A:  MOVLW  01
098C:  MOVWF  08
098E:  MOVLW  02
0990:  MOVWF  09
0992:  RCALL  0948
....................        break; 
0994:  BRA    09AA
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0996:  CLRF   0C
0998:  MOVLW  10
099A:  MOVWF  0D
099C:  RCALL  08AC
....................        break; 
099E:  BRA    09AA
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
09A0:  MOVLW  01
09A2:  MOVWF  0C
09A4:  MOVFF  07,0D
09A8:  RCALL  08AC
....................        break; 
....................    } 
09AA:  GOTO   09C2 (RETURN)
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
....................  
.................... #byte PORTB = 0xf81 
....................  
.................... void main(void){ 
*
09CE:  CLRF   FF8
09D0:  BSF    FD0.7
09D2:  MOVF   FC1,W
09D4:  ANDLW  C0
09D6:  IORLW  0F
09D8:  MOVWF  FC1
09DA:  MOVLW  07
09DC:  MOVWF  FB4
....................     
....................    lcd_init(); 
09DE:  BRA    08E8
....................     
....................    lcd_putc("\f"); 
09E0:  MOVLW  1C
09E2:  MOVWF  FF6
09E4:  MOVLW  08
09E6:  MOVWF  FF7
09E8:  RCALL  09AE
....................     
....................    lcd_gotoxy(3,1); 
09EA:  MOVLW  03
09EC:  MOVWF  08
09EE:  MOVLW  01
09F0:  MOVWF  09
09F2:  RCALL  0948
....................     
....................    lcd_putc("Electronics"); 
09F4:  MOVLW  1E
09F6:  MOVWF  FF6
09F8:  MOVLW  08
09FA:  MOVWF  FF7
09FC:  RCALL  09AE
....................     
....................    lcd_gotoxy(4,2); 
09FE:  MOVLW  04
0A00:  MOVWF  08
0A02:  MOVLW  02
0A04:  MOVWF  09
0A06:  RCALL  0948
....................     
....................    lcd_putc("*****"); 
0A08:  MOVLW  2A
0A0A:  MOVWF  FF6
0A0C:  MOVLW  08
0A0E:  MOVWF  FF7
0A10:  RCALL  09AE
....................     
....................    while(TRUE){} 
0A12:  BRA    0A12
.................... } 
0A14:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
