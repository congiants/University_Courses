CCS PCH C Compiler, Version 5.011, 5967               16-Απρ-24 18:01

               Filename:   C:\Users\D1_Station1\Desktop\Lab_06\Lab_06C\Source_code_proteus\source_code_proteus.lst

               ROM used:   356 bytes (1%)
                           Largest free fragment is 31576
               RAM used:   30 (1%) at main() level
                           30 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   0136
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  FF2.5
005A:  GOTO   0064
005E:  BTFSC  FF2.2
0060:  GOTO   00A6
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB         =0xF81     
....................                                
.................... void init (void);              
.................... void timer0_int(void);         
.................... int16 counter1=2;   
.................... int16 counter2=3; 
.................... int16 counter3=4;   
.................... int16 counter4=6;  
....................                               
.................... void main(){             
*
0136:  CLRF   FF8
0138:  BCF    FF1.2
013A:  BSF    FD0.7
013C:  BSF    07.7
013E:  CLRF   17
0140:  MOVLW  02
0142:  MOVWF  16
0144:  CLRF   19
0146:  MOVLW  03
0148:  MOVWF  18
014A:  CLRF   1B
014C:  MOVLW  04
014E:  MOVWF  1A
0150:  CLRF   1D
0152:  MOVLW  06
0154:  MOVWF  1C
0156:  MOVF   FC1,W
0158:  ANDLW  C0
015A:  IORLW  0F
015C:  MOVWF  FC1
015E:  MOVLW  07
0160:  MOVWF  FB4
....................    init();                        
0162:  BRA    011A
....................    while (TRUE){} 
0164:  BRA    0164
.................... } 
....................  
.................... #INT_TIMER0                   
....................  
0166:  BRA    0166
.................... void timer0_int(void){ 
....................    set_timer0(60858);                                   
*
00A6:  MOVLW  ED
00A8:  MOVWF  FD7
00AA:  MOVLW  BA
00AC:  MOVWF  FD6
....................    counter1--; 
00AE:  MOVF   16,W
00B0:  BTFSC  FD8.2
00B2:  DECF   17,F
00B4:  DECF   16,F
....................    counter2--; 
00B6:  MOVF   18,W
00B8:  BTFSC  FD8.2
00BA:  DECF   19,F
00BC:  DECF   18,F
....................    counter3--; 
00BE:  MOVF   1A,W
00C0:  BTFSC  FD8.2
00C2:  DECF   1B,F
00C4:  DECF   1A,F
....................    counter4--; 
00C6:  MOVF   1C,W
00C8:  BTFSC  FD8.2
00CA:  DECF   1D,F
00CC:  DECF   1C,F
....................    if (counter1==0){ 
00CE:  MOVF   16,F
00D0:  BNZ   00E0
00D2:  MOVF   17,F
00D4:  BNZ   00E0
....................          counter1=2; 
00D6:  CLRF   17
00D8:  MOVLW  02
00DA:  MOVWF  16
....................          PORTB=PORTB^0b00000001;               
00DC:  MOVLW  01
00DE:  XORWF  F81,F
....................    } 
....................     
....................    if (counter2==0){ 
00E0:  MOVF   18,F
00E2:  BNZ   00F2
00E4:  MOVF   19,F
00E6:  BNZ   00F2
....................          counter2=3; 
00E8:  CLRF   19
00EA:  MOVLW  03
00EC:  MOVWF  18
....................          PORTB=PORTB^0b00000010;               
00EE:  MOVLW  02
00F0:  XORWF  F81,F
....................    } 
....................     
....................    if (counter3==0){ 
00F2:  MOVF   1A,F
00F4:  BNZ   0102
00F6:  MOVF   1B,F
00F8:  BNZ   0102
....................          counter3=4; 
00FA:  CLRF   1B
00FC:  MOVLW  04
00FE:  MOVWF  1A
....................          PORTB=PORTB^0b00000100;               
0100:  XORWF  F81,F
....................    } 
....................     
....................    if (counter4==0){ 
0102:  MOVF   1C,F
0104:  BNZ   0114
0106:  MOVF   1D,F
0108:  BNZ   0114
....................          counter4=6; 
010A:  CLRF   1D
010C:  MOVLW  06
010E:  MOVWF  1C
....................          PORTB=PORTB^0b00001000;               
0110:  MOVLW  08
0112:  XORWF  F81,F
....................    }    
0114:  BCF    FF2.2
0116:  GOTO   0064
.................... }        
....................  
....................                               
.................... void init (void) {        
....................  
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_64 );  
011A:  MOVLW  85
011C:  MOVWF  FD5
....................     
....................    set_timer0(60858);                        
011E:  MOVLW  ED
0120:  MOVWF  FD7
0122:  MOVLW  BA
0124:  MOVWF  FD6
....................     
....................    enable_interrupts(INT_TIMER0); 
0126:  BSF    FF2.5
....................     
....................    enable_interrupts(GLOBAL); 
0128:  MOVLW  C0
012A:  IORWF  FF2,F
....................     
....................    set_tris_b(0x00); 
012C:  MOVLW  00
012E:  MOVWF  F93
....................     
....................    PORTB=0x00;                               
0130:  CLRF   F81
0132:  GOTO   0164 (RETURN)
....................    } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
