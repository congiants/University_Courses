CCS PCH C Compiler, Version 5.011, 5967               12-Μαρ-24 17:56

               Filename:   C:\Users\D1_Station1\Desktop\Lab_02\Exercise_01\01d\Source_Code_Proteus\source_code_proteus.lst

               ROM used:   248 bytes (1%)
                           Largest free fragment is 31688
               RAM used:   4 (0%) at main() level
                           7 (0%) worst case
               Stack used: 1 locations
               Stack size: 30

*
0000:  GOTO   0030
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
*
00D4:  ADDWF  FE8,W
00D6:  CLRF   FF7
00D8:  RLCF   FF7,F
00DA:  ADDLW  EF
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*-
00E4:  MOVF   FF5,W
00E6:  MOVWF  FFA
00E8:  TBLRD*
00EA:  MOVF   FF5,W
00EC:  MOVWF  FF9
00EE:  DATA 5A,00
00F0:  DATA 6C,00
00F2:  DATA 82,00
00F4:  DATA 98,00
00F6:  DATA BC,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0004:  CLRF   FEA
0006:  MOVLW  07
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    002E
000E:  MOVLW  0F
0010:  MOVWF  01
0012:  MOVLW  BF
0014:  MOVWF  00
0016:  CLRWDT
0018:  DECFSZ 00,F
001A:  BRA    0016
001C:  DECFSZ 01,F
001E:  BRA    0012
0020:  MOVLW  8F
0022:  MOVWF  00
0024:  DECFSZ 00,F
0026:  BRA    0024
0028:  CLRWDT
002A:  DECFSZ FEF,F
002C:  BRA    000E
002E:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................                   //Πρέπει να τοποθετηθεί οπωσδήποτε στον ίδιο φάκελο στον οποίο θα  
....................                   //αναπτύξετε το project σας. 
.................... #byte PORTB=0xF81 //F81 είναι η θέση τη καταχωρητή δεδομένων της πόρτας Β 
....................                   // στην μνήμη του μικροελεγκτή 
.................... #byte PORTD=0xF83  //F83 είναι η θέση τη καταχωρητή δεδομένων της πόρτας D 
....................                   // στην μνήμη του μικροελεγκτή 
....................  
.................... // *********Από εδώ αρχίζει το κύριο πρόγραμμα************************ 
....................  
.................... void main() 
0030:  CLRF   FF8
0032:  BSF    FD0.7
0034:  MOVF   FC1,W
0036:  ANDLW  C0
0038:  IORLW  0F
003A:  MOVWF  FC1
003C:  MOVLW  07
003E:  MOVWF  FB4
.................... {                   //άνοιγμα αγκύλης της συνάρτησης main 
....................  
.................... set_tris_b(0x00);   //Η θύρα Β γίνεται έξοδος(καταχωρητής κατεύθυνσης=0000 0000) 
0040:  MOVLW  00
0042:  MOVWF  F93
.................... set_tris_d(0xff);   //Η θύρα D γίνεται είσοδος(καταχωρητής κατεύθυνσης=1111 1111) 
0044:  MOVLW  FF
0046:  MOVWF  F95
....................  
.................... PORTB=0b00000000;   // Στην πόρτα Β δίνεται η αρχική τιμή 0000 0000 
0048:  CLRF   F81
....................  
.................... int a;              // Ορισμός ακέραιης μεταβλητής a για αποθήκευση του περιεχομένου 
....................                     // της πόρτας D 
.................... int i;              // ακέραιη μεταβλητή που χρησιμοποιούμε μέσα στην for 
....................                     // Με την παρακάτω δομή while(TRUE){   } εκτελείται για αενάως(για πάντα) το σύνολο των  
....................                     // εντολών που είναι μέσα στις αγκύλες. Η δεσμευμένη λέξη TRUE στη γλώσσα C αντιστοιχεί 
....................                     // στην αληθή συνθήκη. Αντί για TRUE θα μπορούσαμε για παράδειγμα να βάλουμε 5>1, 
....................                     // δηλαδή μια συνθήκη που ισχύει πάντα. 
....................  
.................... while(TRUE) {              //Βρόχος που δεν τελειώνει ποτέ(συνθήκη πάντα αληθής) 
....................             a=PORTD;        //ανάγνωση του περιεχομένου της πόρτας D και μεταφορά του 
004A:  MOVFF  F83,05
....................                             // στη μεταβλητή a 
....................             switch (a){ 
004E:  MOVF   05,W
0050:  ADDLW  FB
0052:  BC    00D0
0054:  ADDLW  05
0056:  GOTO   00D4
....................                        case 0:  PORTB=0xFF; delay_ms(100); PORTB=0x00; delay_ms(100); 
005A:  SETF   F81
005C:  MOVLW  64
005E:  MOVWF  07
0060:  RCALL  0004
0062:  CLRF   F81
0064:  MOVLW  64
0066:  MOVWF  07
0068:  RCALL  0004
....................                                 // Πρόγραμμα αναβοσβησίματος όταν a=0 (PORTD = 0000 0000) 
....................                                 break; 
006A:  BRA    00D0
....................                         
....................                        case 1: PORTB=0b11000011;delay_ms(100);PORTB=0b00111100; delay_ms(100); 
006C:  MOVLW  C3
006E:  MOVWF  F81
0070:  MOVLW  64
0072:  MOVWF  07
0074:  RCALL  0004
0076:  MOVLW  3C
0078:  MOVWF  F81
007A:  MOVLW  64
007C:  MOVWF  07
007E:  RCALL  0004
....................                                 // Πρόγραμμα αναβοσβησίματος όταν a=1 (PORTD = 0000 0001) 
....................                                break; 
0080:  BRA    00D0
....................              
....................                        case 2:PORTB=0b10101010;delay_ms(100);PORTB=0b01010101; delay_ms(100);    
0082:  MOVLW  AA
0084:  MOVWF  F81
0086:  MOVLW  64
0088:  MOVWF  07
008A:  RCALL  0004
008C:  MOVLW  55
008E:  MOVWF  F81
0090:  MOVLW  64
0092:  MOVWF  07
0094:  RCALL  0004
....................                                 // Πρόγραμμα αναβοσβησίματος όταν a=2 (PORTD = 0000 0010) 
....................                               break; 
0096:  BRA    00D0
....................                         
....................                        case 3:PORTB=0b10000000;for(i=1;i<=7;i++) {delay_ms(50);PORTB=PORTB/2;} delay_ms(50); 
0098:  MOVLW  80
009A:  MOVWF  F81
009C:  MOVLW  01
009E:  MOVWF  06
00A0:  MOVF   06,W
00A2:  SUBLW  07
00A4:  BNC   00B4
00A6:  MOVLW  32
00A8:  MOVWF  07
00AA:  RCALL  0004
00AC:  BCF    FD8.0
00AE:  RRCF   F81,F
00B0:  INCF   06,F
00B2:  BRA    00A0
00B4:  MOVLW  32
00B6:  MOVWF  07
00B8:  RCALL  0004
....................                                 // Πρόγραμμα αναβοσβησίματος όταν a=3 (PORTD = 0000 0011) 
....................                               break; 
00BA:  BRA    00D0
....................                         
....................                        case 4:PORTB=0xF0; delay_ms(100); PORTB=0x0F; delay_ms(100); 
00BC:  MOVLW  F0
00BE:  MOVWF  F81
00C0:  MOVLW  64
00C2:  MOVWF  07
00C4:  RCALL  0004
00C6:  MOVLW  0F
00C8:  MOVWF  F81
00CA:  MOVLW  64
00CC:  MOVWF  07
00CE:  RCALL  0004
....................                                 // Πρόγραμμα αναβοσβησίματος όταν a=4 (PORTD = 0000 0100) 
....................                                 break; 
....................                         
....................                      } // κλείσιμο της αγκύλης του switch 
00D0:  BRA    004A
....................  
....................             }   //κλείσιμο της αγκύλης του while 
....................  
.................... }      // κλείσιμο της αγκύλης του main 
....................  
00D2:  BRA    00D2

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
